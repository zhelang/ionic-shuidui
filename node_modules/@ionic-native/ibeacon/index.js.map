{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/ibeacon/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Cordova, Plugin, CordovaCheck } from '@ionic-native/core';\r\nimport { Observable } from 'rxjs/Observable';\r\n\r\ndeclare var cordova: any;\r\n\r\nexport interface Beacon {\r\n  /**\r\n   * The physical device's identifier.\r\n   */\r\n  uuid: string;\r\n\r\n  /**\r\n   * The beacon's major identifier number.\r\n   */\r\n  major: number;\r\n\r\n  /**\r\n   * The beacon's major identifier number.\r\n   */\r\n  minor: number;\r\n\r\n  /**\r\n   * The proximity of the beacon relative to the phone.\r\n   *\r\n   * Possible options are:\r\n   * ProximityImmediate\r\n   * ProximityNear\r\n   * ProximityFar\r\n   * ProximityUnknown\r\n   */\r\n  proximity: 'ProximityImmediate' | 'ProximityNear' | 'ProximityFar' | 'ProximityUnknown';\r\n\r\n  /**\r\n   * Transmission Power of the beacon. A constant emitted by the beacon which indicates what's the expected RSSI at a distance of 1 meter to the beacon.\r\n   */\r\n  tx: number;\r\n\r\n  /**\r\n   * Received Signal Strength Indicator. The strength of the beacon's signal when it reaches the device.\r\n   *  RSSI ranges from aprox -26 (a few inches) to -100 (40-50 m distance).\r\n   */\r\n  rssi: number;\r\n\r\n  /**\r\n   * The accuracy of the ranging.\r\n   */\r\n  accuracy: number;\r\n\r\n}\r\n\r\nexport interface BeaconRegion {\r\n  /**\r\n   * A unique identifier for this region.\r\n   */\r\n  identifier: string;\r\n\r\n  /**\r\n   * The the beacon identifier the device will \"watch\" for. Many beacons can share the same uuid.\r\n   */\r\n  uuid: string;\r\n\r\n  /**\r\n   * The beacon's major identifier number. Optional, of nothing is supplied\r\n   * the plugin will treat it as a wildcard.\r\n   */\r\n  major?: number;\r\n\r\n  /**\r\n   * The beacon's minor identifier number. Optional, of nothing is supplied\r\n   * the plugin will treat it as a wildcard.\r\n   */\r\n  minor?: number;\r\n\r\n  /**\r\n   * If set to true the device will scan for beacons and determine region state anytime\r\n   * the device's screen is turned on or off. Useful for debugging.\r\n   */\r\n  notifyEntryStateOnDisplay?: boolean;\r\n}\r\n\r\nexport interface CircularRegion {\r\n  /**\r\n   * A unique identifier for this region.\r\n   */\r\n  identifier: string;\r\n\r\n  /**\r\n   * The latitude of this region.\r\n   */\r\n  latitude: number;\r\n\r\n  /**\r\n   * The longitude of this region.\r\n   */\r\n  longitude: number;\r\n\r\n  /**\r\n   * The radius of the geofence for this region.\r\n   */\r\n  radius: number;\r\n}\r\n\r\nexport type Region = BeaconRegion | CircularRegion;\r\n\r\nexport interface IBeaconPluginResult {\r\n\r\n  /**\r\n   * The name of the delegate function that produced the PluginResult object.\r\n   */\r\n  eventType: string;\r\n\r\n  /**\r\n   * The region that triggered the event.\r\n   */\r\n  region: Region;\r\n\r\n  /**\r\n   * An array of beacon objects\r\n   */\r\n  beacons: Beacon[];\r\n\r\n  /**\r\n   * The status of the location permission for iOS.\r\n   */\r\n  authorizationStatus: string;\r\n\r\n  /**\r\n   * The state of the phone in relation to the region. Inside/outside for example.\r\n   */\r\n  state: 'CLRegionStateInside' | 'CLRegionStateOutside';\r\n\r\n  /**\r\n   * Error message, used only with monitoringDidFailForRegionWithError delegate.\r\n   */\r\n  error: string;\r\n}\r\n\r\nexport interface IBeaconDelegate {\r\n  /**\r\n   * An observable that publishes information about the location permission authorization status.\r\n   *\r\n   * @returns {Observable<string>} Returns a string.\r\n   */\r\n  didChangeAuthorizationStatus(): Observable<string>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   * when the native layer is able to determine the device's state.\r\n   *\r\n   * This event is called when the phone begins starts monitoring,\r\n   * when requestStateForRegion is called, etc.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  didDetermineStateForRegion(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   * when the phone enters a region that it was asked to monitor.\r\n   *\r\n   * If the user has given the app Always-Location permission, this function\r\n   *  will be called even when the app is not running on iOS.\r\n   * The app will run silently in the background for a small amount of time.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  didEnterRegion(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   * when the phone exits a region that it was asked to monitor.\r\n   *\r\n   * If the user has given the app Always-Location permission, this function\r\n   *  will be called even when the app is not running on iOS.\r\n   * The app will run silently in the background for a small amount of time.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  didExitRegion(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   *  each time that the device ranges beacons. Modern Android and iOS devices range\r\n   * aproximately once per second.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  didRangeBeaconsInRegion(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   *  when the device begins monitoring a region.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  didStartMonitoringForRegion(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   *  when the device fails to monitor a region.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  monitoringDidFailForRegionWithError(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   *  when the device begins advertising as an iBeacon.\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  peripheralManagerDidStartAdvertising(): Observable<IBeaconPluginResult>;\r\n\r\n  /**\r\n   * An Observable that publishes event data to it's subscribers\r\n   * when the state of the peripheral manager's state updates.\r\n   *\r\n   *\r\n   * @returns {Observable<IBeaconPluginResult>} Returns a IBeaconPluginResult object with information about the event, region, and beacon(s).\r\n   */\r\n  peripheralManagerDidUpdateState(): Observable<IBeaconPluginResult>;\r\n}\r\n\r\n/**\r\n * @name IBeacon\r\n * @description\r\n * This plugin provides functions for working with iBeacons.\r\n *\r\n *  The plugin's API closely mimics the one exposed through the [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html) introduced in iOS 7.\r\n *\r\n * @usage\r\n *\r\n * ```typescript\r\n * import { IBeacon } from '@ionic-native/ibeacon';\r\n *\r\n * constructor(private ibeacon: IBeacon) { }\r\n *\r\n * ...\r\n *\r\n *\r\n * // Request permission to use location on iOS\r\n * this.ibeacon.requestAlwaysAuthorization();\r\n * // create a new delegate and register it with the native layer\r\n * let delegate = this.ibeacon.Delegate();\r\n *\r\n * // Subscribe to some of the delegate's event handlers\r\n * delegate.didRangeBeaconsInRegion()\r\n *   .subscribe(\r\n *     data => console.log('didRangeBeaconsInRegion: ', data),\r\n *     error => console.error();\r\n *   );\r\n * delegate.didStartMonitoringForRegion()\r\n *   .subscribe(\r\n *     data => console.log('didStartMonitoringForRegion: ', data),\r\n *     error => console.error();\r\n *   );\r\n * delegate.didEnterRegion()\r\n *   .subscribe(\r\n *     data => {\r\n *       console.log('didEnterRegion: ', data);\r\n *     }\r\n *   );\r\n *\r\n * let beaconRegion = this.ibeacon.BeaconRegion('deskBeacon','F7826DA6-ASDF-ASDF-8024-BC5B71E0893E');\r\n *\r\n * this.ibeacon.startMonitoringForRegion(beaconRegion)\r\n *   .then(\r\n *     () => console.log('Native layer recieved the request to monitoring'),\r\n *     error => console.error('Native layer failed to begin monitoring: ', error)\r\n *   );\r\n * ```\r\n * @interfaces\r\n * Beacon\r\n * BeaconRegion\r\n * CircularRegion\r\n * IBeaconPluginResult\r\n * IBeaconDelegate\r\n *\r\n */\r\n@Plugin({\r\n  pluginName: 'IBeacon',\r\n  plugin: 'cordova-plugin-ibeacon',\r\n  pluginRef: 'cordova.plugins.locationManager',\r\n  repo: 'https://github.com/petermetz/cordova-plugin-ibeacon',\r\n  platforms: ['Android', 'iOS']\r\n})\r\n\r\nexport class IBeacon {\r\n\r\n  /**\r\n   * Instances of this class are delegates between the {@link LocationManager} and\r\n   * the code that consumes the messages generated on in the native layer.\r\n   *\r\n   * @returns {IBeaconDelegate} An instance of the type {@type Delegate}.\r\n   */\r\n  @CordovaCheck({ sync: true })\r\n  Delegate(): IBeaconDelegate {\r\n    let delegate = new cordova.plugins.locationManager.Delegate();\r\n\r\n    delegate.didChangeAuthorizationStatus = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.didChangeAuthorizationStatus = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.didDetermineStateForRegion = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.didDetermineStateForRegion = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.didEnterRegion = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.didEnterRegion = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.didExitRegion = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.didExitRegion = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.didRangeBeaconsInRegion = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.didRangeBeaconsInRegion = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.didStartMonitoringForRegion = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.didStartMonitoringForRegion = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.monitoringDidFailForRegionWithError = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.monitoringDidFailForRegionWithError = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.peripheralManagerDidStartAdvertising = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.peripheralManagerDidStartAdvertising = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    delegate.peripheralManagerDidUpdateState = (pluginResult?: IBeaconPluginResult) => {\r\n      return new Observable<IBeaconPluginResult>(\r\n        (observer: any) => {\r\n          let cb = (data: IBeaconPluginResult) => observer.next(data);\r\n          return delegate.peripheralManagerDidUpdateState = cb;\r\n        }\r\n      );\r\n    };\r\n\r\n    cordova.plugins.locationManager.setDelegate(delegate);\r\n    return delegate;\r\n  }\r\n\r\n  /**\r\n   * Creates a new BeaconRegion\r\n   *\r\n   * @param {String} identifier @see {CLRegion}\r\n   * @param {String} uuid The proximity ID of the beacon being targeted.\r\n   * This value must not be blank nor invalid as a UUID.\r\n   * @param {Number} major The major value that you use to identify one or more beacons.\r\n   * @param {Number} minor The minor value that you use to identify a specific beacon.\r\n   * @param {BOOL} notifyEntryStateOnDisplay\r\n   *\r\n   * @returns {BeaconRegion} Returns the BeaconRegion that was created\r\n   */\r\n  @CordovaCheck({ sync: true })\r\n  BeaconRegion(identifer: string, uuid: string, major?: number, minor?: number, notifyEntryStateOnDisplay?: boolean): BeaconRegion {\r\n    return new cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);\r\n  }\r\n\r\n  /**\r\n   * @returns {IBeaconDelegate} Returns the IBeaconDelegate\r\n   */\r\n  @Cordova()\r\n  getDelegate(): IBeaconDelegate { return; }\r\n\r\n  /**\r\n   * @param {IBeaconDelegate} delegate An instance of a delegate to register with the native layer.\r\n   *\r\n   * @returns {IBeaconDelegate} Returns the IBeaconDelegate\r\n   */\r\n  @Cordova()\r\n  setDelegate(delegate: IBeaconDelegate): IBeaconDelegate { return; }\r\n\r\n  /**\r\n   * Signals the native layer that the client side is ready to consume messages.\r\n   * Readiness here means that it has a {IBeaconDelegate} set by the consumer javascript\r\n   * code.\r\n   *\r\n   * The {LocationManager.setDelegate()} will implicitly call this method as well,\r\n   * therefore the only case when you have to call this manually is if you don't\r\n   * wish to specify a {IBeaconDelegate} of yours.\r\n   *\r\n   * The purpose of this signaling mechanism is to make the events work when the\r\n   * app is being woken up by the Operating System to give it a chance to handle\r\n   * region monitoring events for example.\r\n   *\r\n   * If you don't set a {IBeaconDelegate} and don't call this method manually, an error\r\n   * message get emitted in the native runtime and the DOM as well after a certain\r\n   * period of time.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the request and started to send events.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  onDomDelegateReady(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Determines if bluetooth is switched on, according to the native layer.\r\n   * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}\r\n   * indicating whether bluetooth is active.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  isBluetoothEnabled(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Enables Bluetooth using the native Layer. (ANDROID ONLY)\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved when Bluetooth\r\n   * could be enabled. If not, the promise will be rejected with an error.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  enableBluetooth(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Disables Bluetooth using the native Layer. (ANDROID ONLY)\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved when Bluetooth\r\n   * could be enabled. If not, the promise will be rejected with an error.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  disableBluetooth(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Start monitoring the specified region.\r\n   *\r\n   * If a region of the same type with the same identifier is already being\r\n   * monitored for this application,\r\n   * it will be removed from monitoring. For circular regions, the region\r\n   * monitoring service will prioritize\r\n   * regions by their size, favoring smaller regions over larger regions.\r\n   *\r\n   * This is done asynchronously and may not be immediately reflected in monitoredRegions.\r\n   *\r\n   * @param {Region} region An instance of {Region} which will be monitored\r\n   * by the operating system.\r\n   *\r\n   * @returns {Promise<string>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the monitoring request.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  startMonitoringForRegion(region: BeaconRegion): Promise<string> { return; }\r\n\r\n  /**\r\n   * Stop monitoring the specified region.  It is valid to call\r\n   * stopMonitoringForRegion: for a region that was registered for monitoring\r\n   * with a different location manager object, during this or previous\r\n   * launches of your application.\r\n   *\r\n   * This is done asynchronously and may not be immediately reflected in monitoredRegions.\r\n   *\r\n   * @param {Region} region An instance of {Region} which will be monitored\r\n   * by the operating system.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the request to stop monitoring.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  stopMonitoringForRegion(region: BeaconRegion): Promise<void> { return; }\r\n\r\n  /**\r\n   * Request state the for specified region. When result is ready\r\n   * didDetermineStateForRegion is triggered. This can be any region,\r\n   * also those which is not currently monitored.\r\n   *\r\n   * This is done asynchronously and may not be immediately reflected in monitoredRegions.\r\n   *\r\n   * @param {Region} region An instance of {Region} which will be monitored\r\n   * by the operating system.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the request to stop monitoring.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  requestStateForRegion(region: Region): Promise<void> { return; }\r\n\r\n\r\n  /**\r\n   * Start ranging the specified beacon region.\r\n   *\r\n   * If a region of the same type with the same identifier is already being\r\n   * monitored for this application, it will be removed from monitoring.\r\n   *\r\n   * This is done asynchronously and may not be immediately reflected in rangedRegions.\r\n   *\r\n   * @param {Region} region An instance of {BeaconRegion} which will be monitored\r\n   * by the operating system.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the monitoring request.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  startRangingBeaconsInRegion(region: BeaconRegion): Promise<void> { return; }\r\n\r\n  /**\r\n   * Stop ranging the specified region.  It is valid to call\r\n   * stopMonitoringForRegion: for a region that was registered for ranging\r\n   * with a different location manager object, during this or previous\r\n   * launches of your application.\r\n   *\r\n   * This is done asynchronously and may not be immediately reflected in rangedRegions.\r\n   *\r\n   * @param {Region} region An instance of {BeaconRegion} which will be monitored\r\n   * by the operating system.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the request to stop monitoring.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  stopRangingBeaconsInRegion(region: BeaconRegion): Promise<void> { return; }\r\n\r\n  /**\r\n   * Queries the native layer to determine the current authorization in effect.\r\n   *\r\n   * @returns {Promise<IBeaconPluginResult>} Returns a promise which is resolved with the\r\n   * requested authorization status.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  getAuthorizationStatus(): Promise<IBeaconPluginResult> { return; }\r\n\r\n  /**\r\n   * For iOS 8 and above only. The permission model has changed by Apple in iOS 8, making it necessary for apps to\r\n   * explicitly request permissions via methods like these:\r\n   * <a href=\"https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestWhenInUseAuthorization\">requestWhenInUseAuthorization</a>\r\n   * <a href=\"https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestAlwaysAuthorization\">requestAlwaysAuthorization</a>\r\n   *\r\n   * If you are using this plugin on Android devices only, you will never have to use this, nor {@code requestAlwaysAuthorization}\r\n   * @returns {Promise<void>} Returns a promise that is resolved when the request dialog is shown.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  requestWhenInUseAuthorization(): Promise<void> { return; }\r\n\r\n\r\n  /**\r\n   * See the documentation of {@code requestWhenInUseAuthorization} for further details.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved when the native layer\r\n   * shows the request dialog.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  requestAlwaysAuthorization(): Promise<void> { return; }\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise<Region[]>} Returns a promise which is resolved with an {Array}\r\n   * of {Region} instances that are being monitored by the native layer.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  getMonitoredRegions(): Promise<Region[]> { return; }\r\n\r\n  /**\r\n   *\r\n   * @returns {Promise<Region[]>} Returns a promise which is resolved with an {Array}\r\n   * of {Region} instances that are being ranged by the native layer.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  getRangedRegions(): Promise<Region[]> { return; }\r\n\r\n  /**\r\n   * Determines if ranging is available or not, according to the native layer.\r\n   * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}\r\n   * indicating whether ranging is available or not.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  isRangingAvailable(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Determines if region type is supported or not, according to the native layer.\r\n   *\r\n   * @param {Region} region An instance of {Region} which will be checked\r\n   * by the operating system.\r\n   *\r\n   * @returns {Promise<boolean>} Returns a promise which is resolved with a {Boolean}\r\n   * indicating whether the region type is supported or not.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  isMonitoringAvailableForClass(region: Region): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Start advertising the specified region.\r\n   *\r\n   * If a region a different identifier is already being advertised for\r\n   * this application, it will be replaced with the new identifier.\r\n   *\r\n   * This call will accept a valid beacon even when no BlueTooth is available,\r\n   * and will start when BlueTooth is powered on. See {IBeaconDelegate.}\r\n   *\r\n   * @param {Region} region An instance of {Region} which will be advertised\r\n   * by the operating system.\r\n   * @param {Integer} measuredPower: Optional parameter, if left empty, the device will\r\n   * use it's own default value.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the advertising request.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  startAdvertising(region: Region, measuredPower: number): Promise<void> { return; }\r\n\r\n  /**\r\n   * Stop advertising as a beacon.\r\n   *\r\n   * This is done asynchronously and may not be immediately reflected in isAdvertising.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer acknowledged the dispatch of the request to stop advertising.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  stopAdvertising(region: Region): Promise<void> { return; }\r\n\r\n  /**\r\n   * Determines if advertising is available or not, according to the native layer.\r\n   * @returns {Promise<void>} Returns a promise which is resolved with a {Boolean}\r\n   * indicating whether advertising is available or not.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  isAdvertisingAvailable(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Determines if advertising is currently active, according to the native layer.\r\n   * @returns {Promise<void>} Returns a promise which is resolved with a {Boolean}\r\n   * indicating whether advertising is active.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  isAdvertising(): Promise<boolean> { return; }\r\n\r\n  /**\r\n   * Disables debug logging in the native layer. Use this method if you want\r\n   * to prevent this plugin from writing to the device logs.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer has set the logging level accordingly.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  disableDebugLogs(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Enables the posting of debug notifications in the native layer. Use this method if you want\r\n   * to allow the plugin the posting local notifications.\r\n   * This can be very helpful when debugging how to apps behave when launched into the background.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer has set the flag to enabled.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  enableDebugNotifications(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Disables the posting of debug notifications in the native layer. Use this method if you want\r\n   * to prevent the plugin from posting local notifications.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer has set the flag to disabled.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  disableDebugNotifications(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Enables debug logging in the native layer. Use this method if you want\r\n   * a debug the inner workings of this plugin.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved as soon as the\r\n   * native layer has set the logging level accordingly.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  enableDebugLogs(): Promise<void> { return; }\r\n\r\n  /**\r\n   * Appends the provided [message] to the device logs.\r\n   * Note: If debug logging is turned off, this won't do anything.\r\n   *\r\n   * @param {String} message The message to append to the device logs.\r\n   *\r\n   * @returns {Promise<void>} Returns a promise which is resolved with the log\r\n   * message received by the native layer for appending. The returned message\r\n   * is expected to be equivalent to the one provided in the original call.\r\n   */\r\n  @Cordova({otherPromise: true})\r\n  appendToDeviceLog(message: string): Promise<void> { return; }\r\n\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}